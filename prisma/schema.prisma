generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int            @id @default(autoincrement()) @map("user_Id")
  email        String         @unique
  password     String
  car          Car[]
  notification Notification[]

  @@map("user")
}

model Notification {
  notificationId Int      @id @default(autoincrement()) @map("notification_id")
  sendAt         DateTime @default(now()) @map("send_at")
  title          String
  text           String
  user           User     @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  userId         Int      @map("user_id")

  @@map("notification")
}

model Car {
  carId     Int        @id @default(autoincrement()) @map("car_id")
  year      Int
  mileage   Int
  price     Int
  buyAt     DateTime   @map("buy_at")
  user      User       @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  carType   CarType    @relation(fields: [carTypeId], references: [carTypeId], onUpdate: Cascade, onDelete: Cascade)
  userId    Int        @map("user_id")
  carTypeId Int        @map("car_type_id")
  carSpent  CarSpent[]
  usage     Usage[]

  @@map("car")
}

model CarType {
  carTypeId    Int           @id @default(autoincrement()) @map("car_type_id")
  brand        String
  model        String
  beginYear    Int
  endYear      Int
  engine       Float
  transmission Transmission
  gasoline     Gasoline
  car          Car[]
  maintenance  Maintenance[]

  @@map("car_type")
}

model Maintenance {
  maintenanceId Int    @id @default(autoincrement()) @map("maintenance_id")
  condition     Int
  price         Int
  decription    String

  carType   CarType    @relation(fields: [carTypeId], references: [carTypeId], onUpdate: Cascade, onDelete: Cascade)
  carTypeId Int        @map("car_type_id")
  carSpent  CarSpent[]

  @@map("maintenance")
}

model CarSpent {
  carSpentId    Int          @id @default(autoincrement()) @map("car_spent_id")
  type          SpentType
  price         Int
  amount        Int
  description   String
  date          DateTime
  car           Car          @relation(fields: [carId], references: [carId], onUpdate: Cascade, onDelete: Cascade)
  carId         Int          @map("car_id")
  maintenance   Maintenance? @relation(fields: [maintenanceId], references: [maintenanceId], onUpdate: Cascade, onDelete: Cascade)
  maintenanceId Int?         @map("maintenance_id")

  @@map("car_spent")
}

model Usage {
  usageId         Int   @id @default(autoincrement()) @map("usage_id")
  weekNumber      Int   @map("week_number")
  year            Int
  mileage         Int
  averageGasoline Float @map("average_gasoline")
  car             Car   @relation(fields: [carId], references: [carId], onUpdate: Cascade, onDelete: Cascade)
  carId           Int   @map("car_id")

  @@map("usage")
}

enum Transmission {
  Mechanical
  Automatic
}

enum Gasoline {
  D
  A92
  A95
  A98
  A100
}

enum SpentType {
  MAINTENANCE
  GASOLINE
  REPAIR
  INSURANCE
  OTHER
}
